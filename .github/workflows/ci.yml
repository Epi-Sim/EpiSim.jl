name: CI

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ '**' ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build and save Docker image
      run: |
        docker build --build-arg SHOULD_COMPILE=true -t episim-validation .
        docker save episim-validation > /tmp/episim-validation.tar
    
    - name: Upload Docker image
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: /tmp/episim-validation.tar

  python-tests:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download Docker image
      uses: actions/download-artifact@v4
      with:
        name: docker-image
        path: /tmp
    
    - name: Load Docker image
      run: docker load < /tmp/episim-validation.tar
    
    - name: Run Python code quality checks
      run: |
        docker run --rm \
          -v $(pwd):/workspace \
          -w /workspace \
          episim-validation \
          bash -c "cd python && uv run ruff check . && uv run ruff format --check ."
      continue-on-error: true
    
    - name: Run Python tests
      run: |
        docker run --rm \
          -v $(pwd):/workspace \
          -v $(pwd)/models/mitma:/data \
          -w /workspace \
          episim-validation \
          bash -c "cd python && uv run pytest tests/ -v"
    
  julia-tests:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download Docker image
      uses: actions/download-artifact@v4
      with:
        name: docker-image
        path: /tmp
    
    - name: Load Docker image
      run: docker load < /tmp/episim-validation.tar
    
    - name: Run Julia tests
      run: |
        docker run --rm \
          -v $(pwd):/workspace \
          -v $(pwd)/models/mitma:/data \
          -w /workspace \
          episim-validation \
          julia --project=. test/runtests.jl
  
  docker-publish:
    runs-on: ubuntu-latest
    needs: [python-tests, julia-tests]
    # Run on all triggers since CI only runs on PRs and main pushes
    if: always() && !cancelled() && !failure()
    permissions:
      contents: read
      packages: write
      id-token: write
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install cosign
      uses: sigstore/cosign-installer@v3
      with:
        cosign-release: 'v2.2.4'

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log into registry ${{ env.REGISTRY }}
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}
          type=sha

    - name: Build and push Docker image
      id: build-and-push
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64
        build-args: |
          SHOULD_COMPILE=true

    - name: Sign the published Docker image
      env:
        TAGS: ${{ steps.meta.outputs.tags }}
        DIGEST: ${{ steps.build-and-push.outputs.digest }}
      run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}
